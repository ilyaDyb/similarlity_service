Add your tasks to this file to see your progress. Try to write beautifully and thoughtfully, so that everyone is comfortable. And agree on who solves what task.

## SIMILARITY_ALGORITHM:
- Add the ability to use multiple threads to analyze a track

## BACKEND:
Installation and configuration:
    1. Build a basic django app with a welcome message
    2. Build a more convenient and scalable file structure, run the server without errors)
    3. Connect PostgreSQL (set up separation between the test DB (local) and the production DB)
    4. Document the process of installing and running the backend in a README file, and you may also want a folder with developer documentation.

- Consider the possibility for track authors to specify tags for a song. Install the song database with tags in advance.

## TESTS:
- Very many many tests of the song selection algorithm
    Test the behavior of the algorithms for the following scenarios:
        - The same track but with different arrangements (remixes)
        - Similar tracks according to other services
        - Tracks of the same genre, the most obvious one is phonk
        - Similar songs in my personal opinion

        + Identical tracks
        +- Different tracks (I think more testing is needed for this)
- Сonsider reducing the duration of track analysis - will it greatly affect the result of the algorithm
- Сonsider the possibility of reducing the quality of processing without losing the final result

## OTHER:
- Decide how to exchange backend with algorithm in python (REST or execute)