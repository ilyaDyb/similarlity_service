basePath: /api
definitions:
  handlers.InputRefresh:
    properties:
      refresh_token:
        type: string
    type: object
  handlers.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  handlers.RegisterInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.Track:
    properties:
      artist_id:
        type: string
      artists:
        type: string
      id:
        type: integer
      preview_url:
        type: string
      title:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger REST API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: '-'
      parameters:
      - description: Login input
        in: body
        name: LoginInput
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: InputRefresh
        in: body
        name: InputRefresh
        required: true
        schema:
          $ref: '#/definitions/handlers.InputRefresh'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refreshing access Token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: '-'
      parameters:
      - description: Register Input
        in: body
        name: RegisterInput
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /select_artist/{id}:
    post:
      consumes:
      - application/json
      description: Select an artist by their ID and process it via Redis
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Select Artist by ID
      tags:
      - admin
  /tracks:
    get:
      description: '-'
      parameters:
      - description: query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Track'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Search tracks by query
      tags:
      - tracks
  /tracks/{id}:
    get:
      description: '-'
      parameters:
      - description: track ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Track'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get track by id
      tags:
      - tracks
  /tracks/similar/{id}:
    get:
      description: '-'
      parameters:
      - description: track_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Track'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get similar tracks by track_id
      tags:
      - tracks
securityDefinitions:
  JWT:
    type: basic
swagger: "2.0"
